#!/usr/bin/env node

let app = require('../index');
let debug = require('debug')('express-nodejs:server');
let http = require('http');
const fs = require("fs");
const path = require('path');
/**
 * Get port from environment and store in Express.
 */
fs.readFile(path.resolve(__dirname, "../config.json"), 'utf8', function (err, data) {
  let config = JSON.parse(data)
  if (config.process&&!err) {
    let port = normalizePort(process.env.PORT || config.port);
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    let server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
      let port = parseInt(val, 10);

      if (isNaN(port)) {
        // named pipe
        return val;
      }

      if (port >= 0) {
        // port number
        return port;
      }

      return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      console.log(bind + " 端口启用成功！");
      debug(bind + "端口启用成功！");
    }
  } else {
    console.log(err);
    process.exit(1);
  }
})